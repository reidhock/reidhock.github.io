<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-27T19:53:53+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lee + Developer</title><subtitle>blog by WoongHee Lee</subtitle><entry><title type="html">[이것저것] 국비지원교육 그 후…</title><link href="http://localhost:4000/%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EA%B5%AD%EB%B9%84%EC%A7%80%EC%9B%90-%EA%B5%90%EC%9C%A1-%EA%B7%B8-%ED%9B%84/" rel="alternate" type="text/html" title="[이것저것] 국비지원교육 그 후..." /><published>2019-12-26T00:00:00+09:00</published><updated>2019-12-26T00:00:00+09:00</updated><id>http://localhost:4000/%5B%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83%5D%EA%B5%AD%EB%B9%84%EC%A7%80%EC%9B%90%20%EA%B5%90%EC%9C%A1%20%EA%B7%B8%20%ED%9B%84...</id><content type="html" xml:base="http://localhost:4000/%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EA%B5%AD%EB%B9%84%EC%A7%80%EC%9B%90-%EA%B5%90%EC%9C%A1-%EA%B7%B8-%ED%9B%84/">&lt;hr /&gt;
&lt;p&gt;그동안 취업한다고 바빠서 포스팅을 하지 못했다. 얼마나 자주, 얼마나 더 포스팅을 할지는 모르겠지만 글쓰기가 생각보다 재미있어서 계속해보고 싶다는 생각은 가지고 있다. 이번 포스팅에서는 국비지원 IT교육 후기 및 취업 관련해서 이야기해보고자 한다.
***&lt;/p&gt;

&lt;h2 id=&quot;비전공생으로-국비지원-it교육-후기&quot;&gt;비전공생으로 국비지원 IT교육 후기&lt;/h2&gt;
&lt;p&gt;2019년 4월에 남들보다는 뒤늦게 국비지원교육을 통해서 6개월 간 프로그래밍을 배웠다. 사회생활을 한 경험도 없고 전공자도 아니고 새로운 분야를 처음부터 시작하기에는 늦은 감이 있어서 걱정도 많았지만 어렸을 때부터 컴퓨터쪽 일을 늘 하고 싶었던 터라 용기내서 시작했다. 정말 큰 용기내서 시작했다. 왜냐하면 한국에서는 예외도 있겠지만 나이가 많을수록 취업의 문이 좁아지기 시작하기 때문이다. 따라서 이 후기는 남들에게 “해라,말아라” 기보다는 솔직하게 이야기하는 것에 집중을 하고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;수업-자체는-크게-어렵지-않다&quot;&gt;수업 자체는 크게 어렵지 않다.&lt;/h3&gt;
&lt;p&gt;비전공이라서 쫄을 것도 전혀없었다. 왜냐하면 처음부터 차근차근 알려주고 강사들도 어느정도 매뉴얼이 있기 때문에 매 수업 때마다 자기가 하던 레파토리를 쓰기에 나름 체계적으로 배울 수 있는 구조로 되어있다. 하지만 자기가 비전공인데도 잘따라가네? 하면 안된다. 체계적이지만 6개월의 과정은 터무니 없이 짧고 공부해야 할 것은 수업외적으로도 너무나 많다. 그렇다고 수업끝나고 매일 새벽 1시까지 공부한 것은 아니지만 적어도 배운 것은 복습하고 혼자서 공부해야할 부분은 했었다. 국비지원교육은 요점정리교육이고 그 밖의 심화과정은 스스로 해야한다는 마음가짐을 가지면 좋을 것같다.&lt;/p&gt;

&lt;h3 id=&quot;강사의-질&quot;&gt;강사의 질?&lt;/h3&gt;
&lt;p&gt;이건 내가 왈가왈부할 일은 아닌 게 강사분들도 나름 경력이 있으시고 또 학원방침과 정부방침이 있기 때문에 판단하기가 힘들다. 개인적으로는 만족한다. 많은 사람들이 차라리 돈내고 6개월배워라라고 하는데 이건 자신의 경제적인 부분을 고려해야할 것 같다. 개인적으로는 수업의 질은 막바지로 갈수록 점차 떨어졌지만(이건 어느 국비지원교육이나 다 그럴것 같다) 기초를 쌓기에는 충분했다고 생각한다.&lt;/p&gt;

&lt;h3 id=&quot;만족도는-5점-만점에-35점&quot;&gt;만족도는 5점 만점에 3.5점&lt;/h3&gt;
&lt;p&gt;공짜로 들으면서 프로그래밍 세계에 입문할 수 있기 때문에 필자는 매우 감사하게 생각한다. 돈이 많았으면 좋은 학원을 갔겠지만 세상사람 모두가 돈이 많을 수는 없다. 어딜가나 자기 나름이라고 생각한다. 만약 자기가 재벌이 아니고 프로그래밍에 진지하게 입문하고 싶다면 추천한다. 다만 수업이 뒤로 갈수록 루즈해지고 배웠던 것을 또 배우는 느낌이 없지않아 있다. 따라서 막바지 부분에는 스스로 공부하는 능력을 키워놔야된다. 공짜고 다 좋았지만 마지막 2개월이 약했다는 점에서 5점 만점에 3.5점을 주겠다.&lt;/p&gt;

&lt;h2 id=&quot;취업-준비-과정-및-후기&quot;&gt;취업 준비 과정 및 후기&lt;/h2&gt;
&lt;p&gt;현재 모병원에서 개발 업무를 맡고 있다. 남들이 부러워하는 엄청난 직장은 아니지만 나름 만족하고 열심히 배우면서 다니고 있다. 취업전선에 뛰어들면 객관적으로 자신의 실력을 돌아볼 수 있는 계기를 가지고 싶지 않아도 가지게 된다. 사회에는 너무나 많은 전공자들이 취업을 위해 노력하고 있고 또 다른 국비지원 학생들도 널렸다.&lt;/p&gt;</content><author><name></name></author><category term="random [이것저것]" /><category term="algorithm [알고리즘]" /><summary type="html">그동안 취업한다고 바빠서 포스팅을 하지 못했다. 얼마나 자주, 얼마나 더 포스팅을 할지는 모르겠지만 글쓰기가 생각보다 재미있어서 계속해보고 싶다는 생각은 가지고 있다. 이번 포스팅에서는 국비지원 IT교육 후기 및 취업 관련해서 이야기해보고자 한다. ***</summary></entry><entry><title type="html">[오라클] 날짜 관련 함수 정리</title><link href="http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4-%ED%8A%B9%EC%A0%95-%EB%82%A0%EC%A7%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%9E%88%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[오라클] 날짜 관련 함수 정리" /><published>2019-10-31T00:00:00+09:00</published><updated>2019-10-31T00:00:00+09:00</updated><id>http://localhost:4000/%5B%EC%98%A4%EB%9D%BC%ED%81%B4%5D%20%ED%8A%B9%EC%A0%95%20%EB%82%A0%EC%A7%9C%20%EC%82%AC%EC%9D%B4%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B5%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4-%ED%8A%B9%EC%A0%95-%EB%82%A0%EC%A7%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%9E%88%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%ED%95%98%EA%B8%B0/">&lt;p&gt;오늘은 날짜 관련 함수에 대해서 포스팅 해보려고 한다. 처음 쿼리문에 대해서 배울때는 날짜 함수 공부에 대해서 소홀히 했는데 여러 프로젝트를 진행해보니 날짜 관련 함수의 중요성을 깨달았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SYSDATE&lt;/code&gt;: 시스템에 저장된 현재 날짜를 반환한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select sysdate from dual;

#날짜형 데이터는 더하기나 빼기와 같은 연산도 가능하다

select sysdate-1 어제, sysdate 오늘, sysdate+1 내일
from dual
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MONTHS_BETWEEN&lt;/code&gt;: 두 날짜 사이가 몇 개월인지를 반환한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select 컬럼명, sysdate, months_between(sysdate, 컬럼명)
from 테이블명
where 조건절
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD_MONTHS&lt;/code&gt;: 특정 날짜에 개월 수를 더한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select ADD_MONTHS(컬럼명, 더하고 싶은 개월 숫자)
from 테이블명
where 조건절
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NEXT_DAY&lt;/code&gt;: 특정 날짜에서 최초로 도래하는 인자로 받은 요일의 날짜를 반환한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#오늘을 기준으로 최초로 다가오는 수요일이 언제인지 알아본다.
select next_day(sysdate,'수요일') #수요일은 '수' 또는 4로 대체해서 입력할 수 있다.
from dual
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LATS_DAY&lt;/code&gt;: 해당 달의 마지막 날짜를 반환한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select sysdate, last_day(sysdate)
from dual;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="oracle [오라클]" /><category term="sql [쿼리]" /><summary type="html">오늘은 날짜 관련 함수에 대해서 포스팅 해보려고 한다. 처음 쿼리문에 대해서 배울때는 날짜 함수 공부에 대해서 소홀히 했는데 여러 프로젝트를 진행해보니 날짜 관련 함수의 중요성을 깨달았다.</summary></entry><entry><title type="html">[자료구조,파이썬] 스택 (Stack)</title><link href="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D(Stack)/" rel="alternate" type="text/html" title="[자료구조,파이썬] 스택 (Stack)" /><published>2019-10-28T00:00:00+09:00</published><updated>2019-10-28T00:00:00+09:00</updated><id>http://localhost:4000/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D%20%EC%8A%A4%ED%83%9D(Stack)</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D(Stack)/">&lt;p&gt;오늘은 스택(Stack)의 자료구조 대해서 알아보려 한다. 매우 기본적인 자료구조이기 떄문에 반드시 알아야 할 자료 구조 중 하나라고 생각한다. 또 면접에서도 자주 물어보더라…&lt;/p&gt;

&lt;p&gt;먼저 스택의 정의이다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자료를 보관할 수 있는 선형구조&lt;br /&gt;
데이터를 넣을 때에는 한쪽 끝에서 밀어 넣고 마지막에 넣은 데이터를 꺼내오는 자료구조&lt;br /&gt;
후입선출(LIFO)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/20191028-1.jpg&quot; alt=&quot;_config.yml&quot; /&gt;
사실 스택은 파이썬 라이브러리에서 가져다 쓸 수 있지만 공부한다는 차원에서 스택을 나름대로 정의하고 이를 활용하는 연습을 해보려고 한다.&lt;/p&gt;

&lt;p&gt;스택은 배열과 연결리스트로 구현을 해볼 수 있는데 여기서는 배열로 구현을 해보겠다.
먼저 코드를 보고 각 메소드들이 어떤 기능을 하는지 적겠다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#data의 길이
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#data가 비었는지를 확인
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#스택에 추가하는 작업
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#가장 마지막에 넣은 원소를 꺼내는 작업
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#가장 마지막 원소가 무엇인지 들여다보는 작업
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어렵지 않다. 스택의 정의에 맞게 각 메소드들을 구현한 것 뿐이다.&lt;/p&gt;

&lt;p&gt;그렇다면 스택은 어디에 응용이 될 수 있을까?&lt;br /&gt;
수식에는 중위 표기법(infix notation)과 후위 표기법(postfix notation)이 있다. 중위 표기법은 우리가 일상생활에서 쓰는 방식인데 예를 들면 (a+b)&lt;em&gt;(c+d)이다. 이를 후위 표기법으로 표현하면 ab+cd+&lt;/em&gt;이다. 여기서는 이러한 표기법을 배우는 것이 목표가 아니기 때문에 각자 구글링 해보기를 바란다. 여기서 스택을 중위표기법을 후위표기법으로 바꾸는 데 이용할 수 있다.
이를 알고리즘 식으로 표현하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;']'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'['&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'({['&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="data structure [자료구조]" /><category term="python [파이썬]" /><summary type="html">오늘은 스택(Stack)의 자료구조 대해서 알아보려 한다. 매우 기본적인 자료구조이기 떄문에 반드시 알아야 할 자료 구조 중 하나라고 생각한다. 또 면접에서도 자주 물어보더라…</summary></entry><entry><title type="html">[토이프로젝트]LOL Duo - part 2</title><link href="http://localhost:4000/Toy-Project-LOL-Duo-part-2/" rel="alternate" type="text/html" title="[토이프로젝트]LOL Duo - part 2" /><published>2019-10-11T00:00:00+09:00</published><updated>2019-10-11T00:00:00+09:00</updated><id>http://localhost:4000/%5BToy%20Project%5DLOL%20Duo%20-%20part%202</id><content type="html" xml:base="http://localhost:4000/Toy-Project-LOL-Duo-part-2/">&lt;hr /&gt;
&lt;p&gt;저번 포스트를 보니 Dispatcher Servlet에 대한 설명이 부족한 것 같아 그 부분을 조금 더 다루고 root context와 자식 context의 역할에 대해 알아보고자 한다. 이번 포스트를 하면서 깨달은 점은 내가 쓰고 있던 설정들과 코드들을 100% 완벽히 이해하지 못했다는 점이다. 아직 갈길이 멀다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt;을 다시 적어보겠다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;         
	&lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;/WEB-INF/jsp/member/main/main.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;
			  org.springframework.web.filter.CharacterEncodingFilter
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
    	&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;utf-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;

  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
    	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;classpath*:config/spring/context-*.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;action&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;
			org.springframework.web.servlet.DispatcherServlet
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
				/WEB-INF/config/*-servlet.xml
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;action&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dispatcher-servlet&quot;&gt;Dispatcher-Servlet&lt;/h2&gt;

&lt;p&gt;먼저 Dispatcher Servlet이 무엇인지 알아보자. Spring MVC은 다른 웹 프레임워크 처럼 front controller pattern을 사용한다. 클라이언트(브라우저)로부터 어떠한 요청이 오면 Tomcat과 같은 Servlet Container가 요청을 받는데 이때 제일 앞에서 요청을 처리하는 프론트 컨트롤러를 spring에서 정의하여 이를 Dispatcher Servlet이라고 한다.&lt;/p&gt;

&lt;p&gt;Dispatcher Servlet은 request를 처리하면서 공유되는 알고리즘을 제공하고 실제 처리 과정은 지정된 components에서 발생한다. Dispatcher Servlet은 Java Configuration이나 web.xml에서 선언이 되고 mapping이 된다. 그 후 Request Mapping, view resolution, exception handling 등을 처리한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20191011-2.png&quot; alt=&quot;_config.yml&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금 당장은 와닿는 그림은 아니지만 일단 보면서 확인할 수 있는 부분은 Dispatcher Servlet이 중추역할을 하면서 처리와 응답을 관리한다. 이 그림은 한번 더 사용하면서 추후 설명하겠다.&lt;/p&gt;

&lt;h2 id=&quot;context-hierarchy&quot;&gt;Context Hierarchy&lt;/h2&gt;

&lt;p&gt;이 전 포스트에서 언급한것 처럼 Context, 쉽게 말해 설정 파일에도 계층 구조가 있다. 이렇게 계층 구조를 가지는 설정파일을 만드는 이유는 각각 생성한 빈들을 공유할 수 있게 하기 위해서이다. 계층구조에는 바로 root WebApplicationContext와 servlet WebApplicationContext가 계층 구조로 이루어져 있다. 쉽게 구분하자면 ContextLoaderListener가 지정하는 파일은 Servlet WebApplicationContext이고 DispatcherServlet이 지정하는 파일은 root WebApplicationContext이 된다.&lt;/p&gt;

&lt;p&gt;이들은 부모와 자식 관계를 가지고 있는데 Root WebApplicationContext는 모든 Servlet WebApplicationContext에서 사용이 가능하다. 말 그대로 root는 뿌리가 되는 느낌이랄까?&lt;/p&gt;

&lt;p&gt;그림으로 보면 이러하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20191011-3.png&quot; alt=&quot;_config.yml&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;단순 설정 빈을 공유하기 위한 이유 말고도 그 목적에도 차이가 난다.
ServletContext의 경우 Entry Point로써 클라이언트의 요청을 처리해 줄 controller의 mapping 설정과 요청 처리 후 view 처리를 어떻게 할 것인가에 대한 설정등을 포함한다.
RootContext의 경우 web application의 실제 비즈니스 혹은 목적을 위한 service layer와 해당 service layer에서 조회 및 처리에 필요한 database와 연결되는 bean들에 대한 설정을 포함한다.&lt;/p&gt;

&lt;p&gt;따라서 context component scan을 통한 controller, service, repository의 bean 등록 설정을 할 때 주의를 기울여야 한다. 물론 다 한번에 스캔해버려도 상관은 없지만 불필요한 bean 등록이 발생하게 되어 낭비가 발생한다. 따라서 bean 등록 시 include 와 exclude를 적절히 사용하여 불필요한 중복 bean 등록을 피하는 것이 좋다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;최대한 정리를 해보려고 썼지만 글이 영 엉성한 느낌이다. 앞으로 계속해서 수정해나가야 할 것 같다. 다음 포스트가 언제가 될지는 모르겠지만 아직 설정단계가 끝나지 않았다. 스프링은 설정이 반이라더니 그 말이 맞다. 혹시 틀리거나 부족한 부분은 댓글로 남겨주시면 바로바로 수정해나가려고 노력하겠다.&lt;/p&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://addio3305.tistory.com/&quot;&gt;흔한개발자&lt;/a&gt;, &lt;a href=&quot;https://nice2049.tistory.com/entry/spring-rootContext-%EA%B7%B8%EB%A6%AC%EA%B3%A0-servletContext-%EB%8C%80%ED%95%B4%EC%84%9C&quot;&gt;Spring by Pivotal&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="spring framework [스프링]" /><summary type="html">저번 포스트를 보니 Dispatcher Servlet에 대한 설명이 부족한 것 같아 그 부분을 조금 더 다루고 root context와 자식 context의 역할에 대해 알아보고자 한다. 이번 포스트를 하면서 깨달은 점은 내가 쓰고 있던 설정들과 코드들을 100% 완벽히 이해하지 못했다는 점이다. 아직 갈길이 멀다.</summary></entry><entry><title type="html">[이것저것] 프로그래머스 코딩테스트 후기</title><link href="http://localhost:4000/%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="[이것저것] 프로그래머스 코딩테스트 후기" /><published>2019-09-28T00:00:00+09:00</published><updated>2019-09-28T00:00:00+09:00</updated><id>http://localhost:4000/%5B%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83%5D%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%20%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84%EA%B8%B0/">&lt;hr /&gt;
&lt;p&gt;구직 활동을 하던 중 프로그래머스 주관으로 하는 온라인 잡페어의 온라인 코딩테스트 후기를 쓰려고한다. 결과부터 말하자면 코딩테스트의 전체적 난이도는 중 정도 될 것 같다. 생애 처음으로 하는 코딩테스트였던 만큼 준비도 나름 열심히 했지만 잘 풀지 못했다. 시간에 쫓긴다는 압박도 있었고 실력적으로도 부족한 부분도 스스로 많이 느꼈다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;1번-문제&quot;&gt;1번 문제&lt;/h5&gt;
&lt;p&gt;올려도 되는 지 안되는 지를 몰라서 일단은 올리지 않겠다. 문제는 대충 배열로 주어진 일정 크기의 상품과 상자를 주고 어떻게 하면 가장 많은 상품을 주어진 상자에 담을 수 있는가하는 문제였다. 일단 정답을 맞추기는 했지만 아니나 다를까 시간 초과. 반복문을 두번 돌린게 문제가 되지 않았나 싶다. 리스트 컴프리헨션을 이용해서 풀었으면 어땠을까 싶다.&lt;/p&gt;

&lt;h5 id=&quot;2번-문제&quot;&gt;2번 문제&lt;/h5&gt;
&lt;p&gt;체스의 비숍과 관련된 문제. 정해진 위치에 비숍들을 올려놓고 얼마나 많은 장기말들을 비숍이 한번만 움직였을 때 잡히지 않고 놓을 수 있는가라는 문제다. for 문과 while 문을 이용해서 문제를 해결하면 풀릴 것 같았지만 비숍들을 여러군데 놓았을 때의 상황에 맞게 함수를 만들지 못했다.&lt;/p&gt;

&lt;h5 id=&quot;3번-문제&quot;&gt;3번 문제&lt;/h5&gt;
&lt;p&gt;한 줄로 숫자들을 써놓고 숫자들을 안전하게 자르기 위해 해당 숫자의 앞의 숫자와 뒤의 숫자를 반을 자른다. 그 다음 반듯하게 잘린 숫자들의 최대합을 만들도록 하는 문제이다. 머릿속으로는 이해가 되는데 실제 코딩으로는 전혀 옮기지 못했던 문제다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;예상은 했지만 조금은 씁쓸한 결과를 받았다. 아직 많이 부족하다.&lt;/p&gt;</content><author><name></name></author><category term="random [이것저것]" /><summary type="html">구직 활동을 하던 중 프로그래머스 주관으로 하는 온라인 잡페어의 온라인 코딩테스트 후기를 쓰려고한다. 결과부터 말하자면 코딩테스트의 전체적 난이도는 중 정도 될 것 같다. 생애 처음으로 하는 코딩테스트였던 만큼 준비도 나름 열심히 했지만 잘 풀지 못했다. 시간에 쫓긴다는 압박도 있었고 실력적으로도 부족한 부분도 스스로 많이 느꼈다.</summary></entry><entry><title type="html">[자료구조,파이썬] 양방향 연결 리스트</title><link href="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="[자료구조,파이썬] 양방향 연결 리스트" /><published>2019-09-24T00:00:00+09:00</published><updated>2019-09-24T00:00:00+09:00</updated><id>http://localhost:4000/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D%EC%97%B0%EA%B2%B0%20%EB%A6%AC%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8/">&lt;p&gt;이 포스트에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;연결 리스트(LinkedList)&lt;/code&gt;에 대해서 그동안 배우고 공부한 부분을 정리하고자 한다. 연결리스트는 서로 하나씩 연결된 &lt;code class=&quot;highlighter-rouge&quot;&gt;노드(Node)&lt;/code&gt;들로 구성되있는데 배열과 비슷하지만 다르다. 기차로 예를 들면 한 열로 쭈욱 늘어놓은 다음에 기차 한칸 한칸씩 연결한 모습을 떠올리면 될 것 같다.&lt;/p&gt;

&lt;p&gt;각 노드들은 자신이 가지고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터&lt;/code&gt;와 해당 노드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;다음 노드가 무엇인지를 가르키는 정보&lt;/code&gt;를 가지고 있다. 여기서의 예는 단순히 숫자를 집어넣지만 데이터는 다른 데이터 구조가 될 수 있다.&lt;/p&gt;

&lt;p&gt;노드를 코드로 만들면 이런 모양이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DoublyLinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;#데이터를 담은 노드들은 모두 같은 모양이 될 것이다.
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'LinkedList: empty'&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' -&amp;gt; '&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 연결리스트들을 하나씩 뽑아 하나의 리스트에 넣는다.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#테일 다음의 노드가 없으면 while문 탈출
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 앞에서부터 하나씩 차근차근 뒤진다.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#pos가 절반보다 크면 뒤에서부터 뒤져라
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 이건 숫자를 넣어보면서 이해해보면 좋다.
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;노드를 생성하는 Node class와 연결리스트의 처음과 끝 노드가 무엇인지 그리고 총 노드의 갯수가 몇갠지를 알려주는 LinkedList를 만들었다. 지금 당장은 비어있는 연결리스트가 되겠다. 배열에 비해 연결리스트는 원소의 삽입, 삭제에 이점을 가진다. 위에서 쓰인 연결리스트는 양방향 연결리스트로 만들었는데 앞 노드에서 뒤의 노드를 찾을 때도 사용이 되고 뒤에서 부터 앞의 노드들을 차근차근 조사할 수 있도록 만들었다.&lt;/p&gt;

&lt;p&gt;이 부분을 공부하면서 미국에서 창업관련 과제를 했을 때를 떠올렸다. 당시 Demopublican 이라는 중립 정치기사 웹사이트를 만들면 어떨까하는 구상을 해보았는데 그 아이디어를 구현하기 위해 양방향 연결리스트를 쓰면 내가 생각한 페이지 형식의 중립 뉴스 웹사이트를 보다 쉽고 효율적으로 만들 수 있지 않을까 라는 생각을 해보았다. 현재 나름의 프로젝트를 진행 중이기 때문에 당장 구현해볼 순 없겠지만 다음 개인 프로젝트는 이 자료구조를 이용해서 만들어보면 좋을 것 같다.&lt;/p&gt;</content><author><name></name></author><category term="data structure [자료구조]" /><category term="python [파이썬]" /><summary type="html">이 포스트에는 연결 리스트(LinkedList)에 대해서 그동안 배우고 공부한 부분을 정리하고자 한다. 연결리스트는 서로 하나씩 연결된 노드(Node)들로 구성되있는데 배열과 비슷하지만 다르다. 기차로 예를 들면 한 열로 쭈욱 늘어놓은 다음에 기차 한칸 한칸씩 연결한 모습을 떠올리면 될 것 같다.</summary></entry><entry><title type="html">[토이프로젝트]LOL Duo - part 1</title><link href="http://localhost:4000/Toy-Project-LOL-Duo-part-1/" rel="alternate" type="text/html" title="[토이프로젝트]LOL Duo - part 1" /><published>2019-09-23T00:00:00+09:00</published><updated>2019-09-23T00:00:00+09:00</updated><id>http://localhost:4000/%5BToy%20Project%5DLOL%20Duo%20-%20part%201</id><content type="html" xml:base="http://localhost:4000/Toy-Project-LOL-Duo-part-1/">&lt;hr /&gt;
&lt;p&gt;처음 프로젝트를 진행했을 때 나온 아이디어 중 하나를 가지고 두번째 프로젝트를 시작하려고 한다. 그동안 &lt;a href=&quot;https://addio3305.tistory.com/&quot;&gt;흔한개발자&lt;/a&gt;의 블로그를 보고 프로젝트를 진행했는데 몇몇 스프링 설정이나 다른 소소한 부분들을 디테일하게 이해하지 못한 부분이 있었다. 그래서 이번 기회에 두번째 프로젝트를 진행하면서 스프링 설정들의 개념이나 그 밖의 요소들을 복습할 겸 포스트할 계획이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;먼저 개발환경이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server: Tomcat 7.0
Tool: STS 3.99, GIT, SQL Developer
DB: Oracle 10g
Language: Java(jdk 1.8), JSP, HTML, Javascript, jQuery, ajax
Framework: Spring Framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이미 프로젝트가 진행이 된 상태이기 때문에 조금 조잡해보일지도 모르겠지만 하나하나 정리해나가면서 설명해나가려고 한다.&lt;/p&gt;

&lt;p&gt;먼저 전체적인 구조이다.
&lt;img src=&quot;/images/20191008-1.png&quot; alt=&quot;_config.yml&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Controller, Service, DAO class 들을 기능 별로 묶었고 root context와 servlet context를 볼 수 있다. 두 context config에 대해서는 차차 다루기로 하고 먼저 web.xml을 들여다 보자. 먼저 전체 코드이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;         
	&lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;/WEB-INF/jsp/member/main/main.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;
			  org.springframework.web.filter.CharacterEncodingFilter
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
    	&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;utf-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;

  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
    	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;action&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;
			org.springframework.web.servlet.DispatcherServlet
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
				/WEB-INF/config/*-servlet.xml
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;action&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;classpath*:config/spring/context-*.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;최대한 자세히 설명하고자 하니 첫번째 줄 부터 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;         
	&lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이는 서블렛 버전에 따라 다르다. 현재 필자가 쓰고 있는 서블렛 버전은 2.5 이고 아는 바로는 4.0까지 있는 걸로 알고 있다. 따라서 원하는 설정에 따라 위의 헤더를 바꾸어주면 될 것 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;welcome-file-list&amp;gt;
  &amp;lt;welcome-file&amp;gt;/WEB-INF/jsp/member/main/main.jsp&amp;lt;/welcome-file&amp;gt;
&amp;lt;/welcome-file-list&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사실 있어도 되고 없어도 되는 코드이다. 맨 처음 프로젝트를 실행했을 때 나오는 jsp 파일을 지정해 준 것인데 이는 컨트롤러로 처리가 가능하기 때문에 없어도 무방하다. 필자는 그냥 만들어놨다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;filter&amp;gt;
  &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;
		org.springframework.web.filter.CharacterEncodingFilter
  &amp;lt;/filter-class&amp;gt;
  &amp;lt;init-param&amp;gt;
    &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;utf-8&amp;lt;/param-value&amp;gt;
  &amp;lt;/init-param&amp;gt;
&amp;lt;/filter&amp;gt;
	&amp;lt;filter-mapping&amp;gt;
		&amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 부분은 중요하다.
필터를 설정하는 것인데 스프링은 인코딩 처리를 위해 CharacterEncodingFilter를 제공한다.
(org.springframework.~~~이걸 보면 아 ~ 스프링은 이걸 제공해주는구나~라고 생각해라) 대한민국은 한글을 쓰고 있기 때문에 utf-8 인코딩이 반드시 필요하다. 모든 페이지에 인코딩을 적용하고 싶기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;을 넣는다. &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;의 뜻은 뒤에 무엇이 오든 모든 것을 포함한다라는 뜻이다. 이렇게 되면 /뒤에 오는 어떤 url 오든지 간에 다 인코딩이 적용된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;listener&amp;gt;
  &amp;lt;listener-class&amp;gt;
    org.springframework.web.context.ContextLoaderListener
  &amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;

&amp;lt;servlet&amp;gt;
	&amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt;
	&amp;lt;servlet-class&amp;gt;
		org.springframework.web.servlet.DispatcherServlet
	&amp;lt;/servlet-class&amp;gt;
	&amp;lt;init-param&amp;gt;
		&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
		&amp;lt;param-value&amp;gt;
			/WEB-INF/config/*-servlet.xml
		&amp;lt;/param-value&amp;gt;
	&amp;lt;/init-param&amp;gt;
	&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;

&amp;lt;servlet-mapping&amp;gt;
	&amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt;
	&amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;

&amp;lt;context-param&amp;gt;
  &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
  &amp;lt;param-value&amp;gt;classpath*:config/spring/context-*.xml&amp;lt;/param-value&amp;gt;
&amp;lt;/context-param&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 ContextLoaderListener의 역할에 대해 알아보자. DispatcherServlet에 의해 생성된 Beans은 ContextLoaderLisener에 의해 생성된 Bean을 참조할 수 있다. 또 Controller가 공유하는 Bean들(DAO, DataSource, Service)을 포함하는 Spring Container를 생성한다.&lt;/p&gt;

&lt;p&gt;조금 더 깊이 들어가보자. 예를 들어 다음과 같은 설정 코드가 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
  &amp;lt;servlet-name&amp;gt;aController&amp;lt;/servlet-name&amp;gt;
  &amp;lt;servlet-class&amp;gt;
    org.springframework.web.servlet.DispatcherServlet
  &amp;lt;/servlet-class&amp;gt;
  &amp;lt;init-param&amp;gt;
	  &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
	  &amp;lt;param-value&amp;gt;/WEB-INF/a-servlet.xml&amp;lt;/param-value&amp;gt;
  &amp;lt;/init-param&amp;gt;
  &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;

&amp;lt;servlet&amp;gt;
  &amp;lt;servlet-name&amp;gt;bController&amp;lt;/servlet-name&amp;gt;
  &amp;lt;servlet-class&amp;gt;
    org.springframework.web.servlet.DispatcherServlet
  &amp;lt;/servlet-class&amp;gt;
  &amp;lt;init-param&amp;gt;
    &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;/WEB-INF/b-servlet.xml&amp;lt;/param-value&amp;gt;
  &amp;lt;/init-param&amp;gt;
  &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 경우는 DispatcherServlet은 각각 별도의 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebApplicationContext&lt;/code&gt;를 사용한다. 따라서 두 context는 독립적이므로 각각의 설정 파일에서 생성한 빈을 공유할 수 없다.&lt;/p&gt;

&lt;p&gt;만약 각각 생성한 빈을 공유하고 싶다면 앞서 언급했듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;ContextLoaderListener&lt;/code&gt;를 사용하여 공통으로 사용할 빈을 설정할 수 있다. web.xml에 들어가있는 코드가 이에 해당하는 코드다. ContextLoaderListener와 DispatcherServlet은 각각 webapplicationcontext를 생성한다. ContextLoaderListener가 생성한 context가 &lt;code class=&quot;highlighter-rouge&quot;&gt;root WebApplicationContext&lt;/code&gt;가 되고 DispatcherServlet이 생성한 인스턴스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet WebApplicationContext&lt;/code&gt;가 된다. Servlet WebApplicationContext들은 root WebApplicationContext의 설정 빈을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;그림으로 보면 다음과 같다.
&lt;img src=&quot;/images/20191008-2.png&quot; alt=&quot;_config.yml&quot; /&gt;
출처:&lt;a href=&quot;https://gmlwjd9405.github.io/&quot;&gt;Heee’s Development Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;따라서 현 프로젝트의 Servlet WebApplicationContext는 &lt;code class=&quot;highlighter-rouge&quot;&gt;/WEB-INF/config/*-servlet.xml&lt;/code&gt; 여기에 해당하는 모든 xml 파일들이 되고 dispatcherServlet이 만든 Root WebApplicationContext는 &lt;code class=&quot;highlighter-rouge&quot;&gt;classpath*:config/spring/context-*.xml&lt;/code&gt; 여기에 해당하는 모든 xml들이 되겠다. 이들에 관해서는 보다 자세히 다음 포스트에서 설명하도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;이 포스트에서는 web.xml에 대해서 알아보았다. 생각보다 더 오래걸려서 놀랐지만 끝까지 해보도록 하겠다. 포스팅하고 싶은게 너무 많아서 고민을 많이했는데 프로젝트에 대한 포스팅은 잘한 결정인 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://addio3305.tistory.com/&quot;&gt;흔한개발자&lt;/a&gt;, &lt;a href=&quot;https://nice2049.tistory.com/entry/spring-rootContext-%EA%B7%B8%EB%A6%AC%EA%B3%A0-servletContext-%EB%8C%80%ED%95%B4%EC%84%9C&quot;&gt;Amor Fati&lt;/a&gt;, &lt;a href=&quot;https://unabated.tistory.com/entry/%EC%8A%A4%ED%94%84%EB%A7%81-ContextLoaderListener-%EC%9D%98-%EC%97%AD%ED%95%A0&quot;&gt;랄라라&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="spring framework [스프링]" /><summary type="html">처음 프로젝트를 진행했을 때 나온 아이디어 중 하나를 가지고 두번째 프로젝트를 시작하려고 한다. 그동안 흔한개발자의 블로그를 보고 프로젝트를 진행했는데 몇몇 스프링 설정이나 다른 소소한 부분들을 디테일하게 이해하지 못한 부분이 있었다. 그래서 이번 기회에 두번째 프로젝트를 진행하면서 스프링 설정들의 개념이나 그 밖의 요소들을 복습할 겸 포스트할 계획이다.</summary></entry><entry><title type="html">[Jekyll] How to install the best Jekyll theme for your blog - part 2</title><link href="http://localhost:4000/jekyll-how-to-choose-the-best-jekyll-theme-for-your-blog-2/" rel="alternate" type="text/html" title="[Jekyll] How to install the best Jekyll theme for your blog - part 2" /><published>2019-09-22T00:00:00+09:00</published><updated>2019-09-22T00:00:00+09:00</updated><id>http://localhost:4000/%5Bjekyll%5Dhow%20to%20choose%20the%20best%20jekyll%20theme%20for%20your%20blog%202</id><content type="html" xml:base="http://localhost:4000/jekyll-how-to-choose-the-best-jekyll-theme-for-your-blog-2/">&lt;hr /&gt;
&lt;p&gt;We are going to pick up what was left in the &lt;a href=&quot;https://reidhock.github.io/jekyll-how-to-choose-the-best-jekyll-theme-for-your-blog/&quot;&gt;last post(How to choose the best jekyll theme for you blog - part 1)&lt;/a&gt;. As I said, it might be tough if it is your first time to use all the tools I introduced or I will. However, the key is go through the difficulties and play with new tools. I guarantee that you will get it eventually. Even I did it. haha Let jump in.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now you have your repository in your laptop and a tool to edit the repository(Atom) and help you upload local changes to Github(Sourcetree).&lt;/p&gt;

&lt;p&gt;Let’s open Atom you download since last post. If you don’t know what Atom is go to the their &lt;a href=&quot;https://atom.io/&quot;&gt;website&lt;/a&gt; and explore. If you are too lazy to read everything, just think that it is basically a tool that helps you to write and edit files and navigate a folder.&lt;/p&gt;

&lt;p&gt;Let’s find your repository in your computer. go to &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;open...&lt;/code&gt; and find where you downloaded the repository in your laptop. Then you will look at this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1-jekyll-2019-09-22.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we touch anything here, you need to download a plugin that allows you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal&lt;/code&gt; in Atom. Go to preferences. Then, you will see install menu and type and install platformio-ide-terminal. After installing the plugin, you will be able to find litte &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; button on the left bottom.
&lt;img src=&quot;/images/2-jekyll-2019-09-22.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if you click the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; button. you will see terminal in Atom. you don’t have to download the plugin but I find it useful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/3-jekyll-2019-09-22.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, if you don’t know what terminal is and you think this terminal window seems scary just copy and paste what I wrote here. In order to use Jekyll, of course you need to install jekyll and we are going to do that in terminal.
type &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install github-pages&lt;/code&gt;. This install plugins like Jekyll, Sass, etc.
Now you can see the changes on the repository folder by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;.
I will explain more about this later but it is faster and easier to see the changes right away instead commit and push to github respository and then see the changes.&lt;/p&gt;

&lt;p&gt;Now, let’s explore the folder/kiko_now theme based blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4-jekyll-2019-09-22.png&quot; alt=&quot;_config.yml&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The folder names speak for theirselves. I will briefly explain these folders.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; is a folder that is used for many pages so the creator of this theme put them separately to avoid repeating the code.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_layout&lt;/code&gt; is a folder that determines how the page would look.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt; is where everything happens. You will write new post here, using &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; format. Markdown is basically is one of markup languages that help you to write and add some features easily on web. By using this, you don’t have to know all that jazz about html language.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_sass&lt;/code&gt; is a folder that makes your blog fancier with lots of colors and fonts.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.sass-cache&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; are not necessarily important to know so I will skip.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;archive&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;theme&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; will be shown in menu navigation. you can delete &lt;code class=&quot;highlighter-rouge&quot;&gt;theme&lt;/code&gt; folder. Actually you should haha. if you click it, you will know why.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; is where you store all the images for you post.&lt;/p&gt;

&lt;p&gt;if you look down, you will see &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file. It is like root of your blog. It takes care of basic settings. For now, let’s just leave how it is and change it later.&lt;/p&gt;

&lt;p&gt;As I shortly mentioned, you can check your blog locally by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal&lt;/code&gt;. Click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;button on the left bottom of Atom window and type ‘jekyll serve’. You should see this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/6-jekyll-2019-09-22.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now open your browser and in address menu type &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/7-jekyll-2019-09-22.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;then you should be able to see the kiko_now theme blog in your browser.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;It is actually taking a lot of effort to cover all the stuff to make a blog. So I will stop it here. who knows, it will have part-3000. haha if you have any questions please leave a comment. I will answer it as soon as I can.&lt;/p&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="jekyll [지킬]" /><category term="github [깃허브]" /><summary type="html">We are going to pick up what was left in the last post(How to choose the best jekyll theme for you blog - part 1). As I said, it might be tough if it is your first time to use all the tools I introduced or I will. However, the key is go through the difficulties and play with new tools. I guarantee that you will get it eventually. Even I did it. haha Let jump in.</summary></entry><entry><title type="html">[파이썬] 문제 풀이 (7)</title><link href="http://localhost:4000/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4(7)/" rel="alternate" type="text/html" title="[파이썬] 문제 풀이 (7)" /><published>2019-09-17T00:00:00+09:00</published><updated>2019-09-17T00:00:00+09:00</updated><id>http://localhost:4000/%5B%ED%8C%8C%EC%9D%B4%EC%8D%AC%5D%EB%AC%B8%EC%A0%9C%20%ED%92%80%EC%9D%B4(7)</id><content type="html" xml:base="http://localhost:4000/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4(7)/">&lt;p&gt;오늘은 재귀함수에 알아보고자 한다.
재귀 함수는 &lt;em&gt;하나의 함수에서 자신을 다시 호출하여 작업을 수행하는 것&lt;/em&gt;을 말한다.
모든 재귀 알고리즘은 반복문을 가진 알고리즘(interative version)을 가지고 있다. 이는 수학적으로 증명된 사실인데 궁금하면 찾아보라.&lt;/p&gt;

&lt;p&gt;재귀 알고리즘은 사람이 이해하기 쉽게 쓰여지고 트리형 자료구조와 잘 어울린다. 하지만 반복되는 알고리즘에 비하면 시간 효율성(둘 다 O(n))은 같지만 효율성은 더 떨어진다. 따라서 언제 어디에서 쓸 지를 신중히 결정해야겠다.&lt;/p&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/python7.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#재귀함수
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#재귀함수와 쌍이 되는 반복되는 구조
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="python [파이썬]" /><category term="algorithm [알고리즘]" /><summary type="html">오늘은 재귀함수에 알아보고자 한다. 재귀 함수는 하나의 함수에서 자신을 다시 호출하여 작업을 수행하는 것을 말한다. 모든 재귀 알고리즘은 반복문을 가진 알고리즘(interative version)을 가지고 있다. 이는 수학적으로 증명된 사실인데 궁금하면 찾아보라.</summary></entry><entry><title type="html">[Jekyll] How to install the best Jekyll theme for your blog - part 1</title><link href="http://localhost:4000/jekyll-how-to-choose-the-best-jekyll-theme-for-your-blog/" rel="alternate" type="text/html" title="[Jekyll] How to install the best Jekyll theme for your blog - part 1" /><published>2019-09-16T00:00:00+09:00</published><updated>2019-09-16T00:00:00+09:00</updated><id>http://localhost:4000/%5Bjekyll%5Dhow%20to%20choose%20the%20best%20jekyll%20theme%20for%20your%20blog</id><content type="html" xml:base="http://localhost:4000/jekyll-how-to-choose-the-best-jekyll-theme-for-your-blog/">&lt;hr /&gt;
&lt;p&gt;Those of you who speak Korean might have realized that I only have been posting about python algorithm quiz. When I started this blog, I wanted my blog to be informative to people who are living outside of my country as well. So from now on, I will try to write some future posts in English.&lt;/p&gt;

&lt;p&gt;I didn’t learn programming in English. So my terminology might not be perfect or very professional. A bright side is if you aren’t a programmer it might be easier to understand since I don’t throw out professional terms haha.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h2&gt;
&lt;p&gt;Our friend, wikipedia says&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Jekyll is a &lt;strong&gt;simple&lt;/strong&gt;, &lt;strong&gt;blog-aware&lt;/strong&gt;, &lt;strong&gt;static site generator&lt;/strong&gt; for personal, project, or organization sites. Written in Ruby by Tom Preston-Werner, GitHub’s co-founder, it is distributed under the open source MIT license.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, people use Jekyll because it is light and easy to use. When I first used Jekyll, I didn’t know anything about it. But after 1~2 weeks, I found myself making this blog.&lt;/p&gt;

&lt;p&gt;If you aren’t a programmer, follow this post and explore later. It will be challenging but eventually you will get it. At the end of this post you will have your own blog!&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation &lt;/h2&gt;
&lt;p&gt;By following this post, you are going to post and update a blog by using some tools(SourceTree, Atom, Github) that help you manage your blog easier. Don’t get scared by new tools. They are user-friendly and easy-to-use tools. (Maybe not Github…maybe…)
In this part, I am going to go through the following and explain one by one.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do I even like Jekyll themes?&lt;/li&gt;
  &lt;li&gt;Create GitHub Account&lt;/li&gt;
  &lt;li&gt;Install a theme and Jekyll&lt;/li&gt;
  &lt;li&gt;Tools(Atom, SourceTree)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jekyll-themes&quot;&gt;Jekyll themes&lt;/h3&gt;
&lt;p&gt;First, you need to see if you even want to use Jekyll to make your own blog. Go visit the following links and see if there is a template that you want to use first.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;https://jekyllthemes.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I wanted a simple and easy-to-use theme. A theme, &lt;a href=&quot;https://aweekj.github.io/kiko-now/&quot;&gt;Kiko_Now&lt;/a&gt;, is what I am currently using for my blog. I chose this because I didn’t have to mess with a new programming language, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;, and it’s easy to navigate throughout the pages.&lt;/p&gt;

&lt;p&gt;So from here, I will continue this post based on Kiko_Now theme.&lt;/p&gt;

&lt;h3 id=&quot;github&quot;&gt;GitHub&lt;/h3&gt;
&lt;p&gt;GitHub is commonly used to host open source projects among many programmers. I understood it as programmers’ facebook/Google Drive. They share their codes and applications they’ve built and comment on each other’s work through GitHub. Lastly, they can save their work in Github repository. In our case, we are going to use GitHub for free repositories and a free blog domain name. If you want to know more, click the following youtube video link that GitHub provides.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/2MsN8gpT6jY&quot;&gt;Introduction to GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now we know what theme we want to use. The next step is creating a new Github account. if you already have an account, you can skip this part.
Go to &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; and create a new account.&lt;/p&gt;

&lt;p&gt;I highly recommend to read all the tutorials and guides. You don’t have to understand but just get a sense of it. That is enough for now.&lt;/p&gt;

&lt;p&gt;Once you successfully make a new account(GitHub might make you create a new repository. Don’t get scared. Just make one for them haha), next step is going to a &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; Kiko_Now theme. &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; is an action that you copy all the files and folders from a repository that you want to copy to your repository. Go to &lt;a href=&quot;https://github.com/AWEEKJ/kiko-now&quot;&gt;https://github.com/AWEEKJ/kiko-now&lt;/a&gt;. Then you will see this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2-jekyll-2019-09-16.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;. Then it will copy this repository to yours. Now if you go to your own repository, you will see the exact same title and contents on your repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a very important part.&lt;/strong&gt; click the repository that you just forked then you will see this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/3-jekyll-2019-09-16.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to change the name(&lt;code class=&quot;highlighter-rouge&quot;&gt;Kiko_Now&lt;/code&gt;) to &lt;code class=&quot;highlighter-rouge&quot;&gt;your account name&lt;/code&gt;. Go to settings and change your repository name as (USERNAME.github.io). In my case, it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;reidhock.github.io&lt;/code&gt;. This will be your blog address!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4-jekyll-2019-09-16.png&quot; alt=&quot;_config.yml&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you followed everything, it is going to look like this. It is up to you how you are going to write new posts. You can either edit on github or you can download on your computer and edit locally. In this post, we are going to use tools such as Sourcetree and Atom that help you to upload your works from your computer to Github repository. They are free tools and you can easily download online. here are the links to download those two tools.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you are ready to download your repository to your local computer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-jekyll-2019-09-16.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;clone or download&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;open in desktop&lt;/code&gt; and download the repository in your local computer. Github will ask you if you want to open it with sourcetree. click &lt;code class=&quot;highlighter-rouge&quot;&gt;open sourcetree&lt;/code&gt;. if you see this window, you did everything right so far(I already have my own blog folder, so it might look little different).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/6-jekyll-2019-09-16.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you are ready to write a new post on your laptop!&lt;/p&gt;

&lt;p&gt;If you followed till here, well done! You haven’t given up! I didn’t realize when I started this post, it is going to be this long. So I am thinking to separate this post into two or three. Until the next post, it would be good for you to explore Github and study how the system works.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;</content><author><name></name></author><category term="jekyll [지킬]" /><category term="github [깃허브]" /><summary type="html">Those of you who speak Korean might have realized that I only have been posting about python algorithm quiz. When I started this blog, I wanted my blog to be informative to people who are living outside of my country as well. So from now on, I will try to write some future posts in English.</summary></entry></feed>